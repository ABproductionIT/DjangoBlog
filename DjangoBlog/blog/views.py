import mimetypes

from django.conf import settings
from django.http import FileResponse, Http404
from django.shortcuts import render, get_object_or_404
from .models import Post, PostImage, SiteInfo
import os
import re
from django.utils.safestring import mark_safe

def find_image_tags(content):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç–µ–≥–∏ $imageN$ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.

    :param content: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–≥–∏ $imageN$
    :return: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    """
    regex = r"\$image\d+\$"  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ $imageN$
    matches = re.findall(regex, content)  # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    return matches if matches else []  # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


def replace_image_tags(content, images_dict):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–≥–∏ $imageN$ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ <img src="URL">

    :param content: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    :param images_dict: —Å–ª–æ–≤–∞—Ä—å {"$image1$": "URL1", "$image2$": "URL2"}
    :return: —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """

    def replacer(match):
        tag = match.group(0)  # –ù–∞–π–¥–µ–Ω–Ω—ã–π $imageN$

        return f'<p> <img src="{images_dict.get(tag, "#")}" alt="\nüñº\n"> </p>'  # –ï—Å–ª–∏ –Ω–µ—Ç URL, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º #

    regex = r"\$image\d+\$"  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ $imageN$
    return mark_safe(re.sub(regex, replacer, content))


def index(request):
    site_name_info=SiteInfo.objects.all().last()
    title = site_name_info.title
    description = site_name_info.description
    posts = Post.objects.filter(posted=True)  # –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    return render(request, 'index.html', {'posts': posts, 'site_name': title, 'description': description})

def post_detail(request, pk):
    ret_post_img_dict = {}
    post = get_object_or_404(Post, pk=pk)
    tags = find_image_tags(post.content)
    p_img = PostImage.objects.filter(tag__in=tags)
    for el in p_img:
        ret_post_img_dict[el.tag] = el.image.url
    print(ret_post_img_dict)

    new_content = replace_image_tags(post.content, ret_post_img_dict)
    print(new_content)

    return render(request, 'post.html', {'post': post, 'content': new_content})

def image_view(request, filename):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = os.path.join(settings.MEDIA_ROOT, 'post_images', filename)
    if os.path.exists(file_path):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
        content_type, _ = mimetypes.guess_type(file_path)
        return FileResponse(open(file_path, 'rb'), content_type=content_type)
    else:
        raise Http404("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")